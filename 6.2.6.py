# Реализуйте класс PermaDict, описывающий словарь, который позволяет добавлять и удалять пары (<ключ>, <значение>), но не позволяет изменять значения по уже имеющимся ключам.
# При создании экземпляра класс должен принимать один аргумент:
#     data — словарь, определяющий начальный набор элементов экземпляра класса PermaDict. Если не передан, начальный набор элементов считается пустым
# Класс PermaDict должен иметь три метода экземпляра:
#     keys() — метод, возвращающий итерируемый объект, элементами которого являются ключи экземпляра класса PermaDict
#     values() — метод, возвращающий итерируемый объект, элементами которого являются значения ключей экземпляра класса PermaDict
#     items() — метод, возвращающий итерируемый объект элементами которого являются элементы экземпляра класса PermaDict в виде кортежей (<ключ>, <значение>)
# При передаче экземпляра класса PermaDict в функцию len() должно возвращаться количество элементов в нем.
# Также экземпляр класса PermaDict должен быть итерируемым объектом, то есть позволять перебирать свои ключи, например, с помощью цикла for.
# Наконец, экземпляр класса PermaDict должен позволять получать значения своих элементов по их ключам, добавлять новые пары (ключ, значение) и удалять уже имеющиеся с помощью оператора del.
# При этом изменение значений по уже имеющимся ключам должно быть недоступно, и при попытке выполнения такой операции должно возбуждаться исключение KeyError с текстом:
# Изменение значения по ключу невозможно
# Примечание 1. Экземпляр класса PermaDict не должен зависеть от словаря, на основе которого он был создан.
# Другими словами, если исходный словарь изменится, то экземпляр класса PermaDict измениться  не должен.
# Примечание 2. Реализация класса PermaDict может быть произвольной, то есть требований к наличию определенных атрибутов нет.
# Примечание 3. Дополнительная проверка данных на корректность в методах не требуется. Гарантируется, что реализованный класс используется только с корректными данными.

class PermaDict:
    def __init__(self, data={}):
        self.__dict__.update(data)

    def keys(self):
        return self.__dict__

    def values(self):
        return self.__dict__.values()

    def items(self):
        return self.__dict__.items()

    def __len__(self):
        return len(self.__dict__)

    def __getitem__(self, item):
        return self.__dict__[item]

    def __setitem__(self, key, value):
        if key in self.__dict__:
            raise KeyError('Изменение значения по ключу невозможно')
        self.__dict__[key] = value

    def __delitem__(self, key):
        del self.__dict__[key]

    def __iter__(self):
        yield from self.__dict__

