# Любой пользовательский класс по умолчанию способен создавать бесконечное количество собственных экземпляров.
# Шаблон проектирования синглтон, напротив, гарантирует, что класс имеет только один собственный экземпляр, и при попытке создать новый, он возвращает уже имеющийся.
# Реализуйте декоратор @limiter для декорирования класса, с помощью которого можно ограничивать количество создаваемых декорируемым классом экземпляров до определенного числа.
# Декоратор должен принимать три аргумента в следующем порядке:
#     limit — количество экземпляров, которое может создать декорируемый класс
#     unique — имя атрибута экземпляра декорируемого класса, значение которого является его идентификатором.
#     Два экземпляра с одинаковыми идентификаторами существовать не могут.
#     Если происходит попытка создать экземпляр, идентификатор которого совпадает с идентификатором одного из ранее созданных экземпляров, должен быть возвращен этот ранее созданный экземпляр
#     lookup — определяет, какой объект должен быть возвращен, если превышено ограничение limit, а значение атрибута unique ранее не использовалось.
#     При значении FIRST возвращается самый первый созданный экземпляр, при значении LAST — самый последний созданный экземпляр
# Примечание 1. Гарантируется, что экземпляры декорируемого класса всегда имеют атрибут, который содержит их идентификатор.

def limiter(limit, unique, lookup):
    instances = {}
    lookups = {}

    def wrapper(cls):
        def get_instance(*args, **kwargs):
            instance = cls(*args, **kwargs)
            lookups.setdefault('FIRST', instance)
            identifier = getattr(instance, unique)
            if len(instances) < limit:
                if identifier not in instances:
                    lookups['LAST'] = instances[identifier] = instance
                return instances[identifier]
            return instances.get(identifier) or lookups.get(lookup)

        return get_instance

    return wrapper
