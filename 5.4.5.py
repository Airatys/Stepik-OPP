# Реализуйте класс Matrix, описывающий двумерную матрицу. При создании экземпляра класс должен принимать три аргумента в следующем порядке:
#     rows — количество строк в матрице
#     cols — количество столбцов в матрице
#     value — начальное значение для элементов матрицы, по умолчанию имеет значение 0
# Экземпляр класса Matrix должен иметь два атрибута:
#     rows — количество строк в матрице
#     cols — количество столбцов в матрице
# Класс Matrix должен иметь два метода экземпляра:
#     get_value() — метод, принимающий в качестве аргументов строку row и столбец col и возвращающий элемент матрицы со строкой row и столбцом col
#     set_value() — метод, принимающий в качестве аргументов строку row, столбец col и значение value и устанавливающий в качестве значения элемента матрицы со строкой row и столбцом col значение value
# Экземпляр класса Matrix должен иметь следующее формальное строковое представление:
# Matrix(<количество строк в матрице>, <количество столбцов в матрице>)
# Неформальным строковым представлением должна быть строка, в которой перечислены все элементы матрицы. Элементы строки матрицы должны быть разделены пробелом, строки матрицы должны быть разделены символом переноса строки \n.
# Например, для объекта Matrix(2, 3) неформальным строковым представлением должна быть строка 0 0 0\n0 0 0, которая при выводе будет отображаться следующим образом:
# 0 0 0
# 0 0 0
# Также экземпляр класса Matrix должен поддерживать унарные операторы +, - и ~:
#     результатом унарного + должен являться новый экземпляр класса Matrix c исходным количеством строк и столбцов и с исходными элементами
#     результатом унарного - должен являться новый экземпляр класса Matrix c исходным количеством строк и столбцов и с элементами, взятыми с противоположным знаком
#     результатом унарного ~ должен являться новый экземпляр класса Matrix, представляющий транспонированную матрицу
# Наконец, при передаче экземпляра класса Matrix в функцию round() должен возвращаться новый экземпляр класса Matrix c исходным количеством строк и столбцов и с элементами, округленными с помощью функции round().
# Во время передачи в функцию round() должна быть возможность в качестве второго необязательного аргумента указать целое число, определяющее количество знаков после запятой при округлении.
# Примечание 1. Индексация строк и столбцов в матрице начинается с нуля.
# Примечание 2. Дополнительная проверка данных на корректность не требуется. Гарантируется, что реализованный класс используется только с корректными данными.
# Примечание 3. Никаких ограничений касательно реализации класса Matrix нет, она может быть произвольной.

class Matrix:
    def __init__(self, rows, cols, value=0):
        self.rows = rows
        self.cols = cols
        self.value = value
        self.matrix =[[value] * cols for i in range(rows)]

    def get_value(self, row, col):
        return self.matrix[row][col]

    def set_value(self, row, col, value):
        self.matrix[row][col] = value


    def __repr__(self):
        return f"{self.__class__.__name__}({self.rows}, {self.cols})"

    def __str__(self):
        str_matrix = ''
        for i in self.matrix:
            str_matrix += f"{' '.join(map(str, i))}\n"
        return str_matrix.rstrip()

    def __pos__(self):
        return self.__class__(self.rows, self.cols, self.value)

    def __neg__(self):
        neq_matrix = self.__class__(self.rows, self.cols, self.value)
        for i in range(self.rows):
            for j in range(self.cols):
                neq_matrix.set_value(i, j, -self.get_value(i, j))
        return neq_matrix

    def __invert__(self):
        invert_matrix = Matrix(self.cols, self.rows, self.value)

        for i in range(self.rows):
            for j in range(self.cols):
                invert_matrix.set_value(j, i, self.get_value(i, j))
        return invert_matrix

    def __round__(self, n=None):
        round_matrix = self.__class__(self.rows, self.cols, self.value)
        for i in range(self.rows):
            for j in range(self.cols):
                round_matrix.set_value(i, j, round(self.get_value(i, j), n))
        return round_matrix
