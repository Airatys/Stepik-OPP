# Реализуйте класс FieldTracker, наследники которого получают возможность отслеживать состояние определенных атрибутов своих экземпляров класса. Дочерние классы должны наследовать четыре метода экземпляра:
#     base() — метод, принимающий в качестве аргумента имя атрибута и возвращающий либо текущее значение этого атрибута, либо исходное (указанное при определении) значение этого атрибута, если оно было изменено
#     has_changed() — метод, принимающий в качестве аргумента имя атрибута и возвращающий True, если значение этого атрибута было изменено хотя бы раз, или False в противном случае
#     changed() — метод, возвращающий словарь, в котором ключами являются имена атрибутов, которые изменяли свои значения, а значениями — их исходные значения
#     save() — метод, сбрасывающий отслеживание. После вызова метода считается, что все атрибуты ранее не изменяли свои значения, а их текущие значения считаются исходными
# Гарантируется, что наследники класса FieldTracker:
#     всегда имеют атрибут класса fields, содержащий кортеж с атрибутами, которые необходимо отслеживать
#     в своем инициализаторе всегда вызывают инициализатор класса FieldTracker после установки первичных значений отслеживаемым атрибутам
# Примечание 1. Будем считать, что атрибут изменяет свое значение только в том случае, если устанавливаемое значение отличается от текущего.
# Примечание 2. Реализация класса FieldTracker может быть произвольной, то есть требований к наличию определенных атрибутов нет.
# Примечание 3. Дополнительная проверка данных на корректность в методах не требуется. Гарантируется, что реализованный класс используется только с корректными данными.

class FieldTracker:
    def __init__(self):
        self._mydict = {i: getattr(self, i) for i in self.fields}

    def base(self, name):
        return self._mydict[name]

    def has_changed(self, name):
        return self._mydict[name] != getattr(self, name)

    def changed(self):
        return {i : self._mydict[i] for i in self._mydict if self.has_changed(i)}

    def save(self):
        for i in self.fields:
            self._mydict[i] = getattr(self, i)
