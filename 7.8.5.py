# 1. Реализуйте класс Lecture, описывающий некоторое выступление. При создании экземпляра класс должен принимать три аргумента в следующем порядке:
#     topic — тема выступления
#     start_time — время начала выступления в виде строки в формате HH:MM
#     duration — длительность выступления в виде строки в формате HH:MM
# 2. Также реализуйте класс Conference, описывающий конференцию, протяженностью в один день.
# Конференция представляет собой набор последовательных выступлений. При создании экземпляра класс не должен принимать никаких аргументов.
# Класс Conference должен иметь четыре метода экземпляра:
#     add() — метод, принимающий в качестве аргумента выступление и добавляющий его в конференцию.
#     Если выступление пересекается по времени с другими выступлениями, должно быть возбуждено исключение ValueError с текстом:
#     Провести выступление в это время невозможно
#     total() — метод, возвращающий суммарную длительность всех выступлений в конференции в виде строки в формате HH:MM
#     longest_lecture() — метод, возвращающий длительность самого долгого выступления в конференции в виде строки в формате HH:MM
#     longest_break() — метод, возвращающий длительность самого долгого перерыва между выступлениями в конференции в виде строки в формате HH:MM
# Примечание 1. Перерыв между выступлениями может быть нулевым. Другими словами, одно выступление может заканчиваться, например, в 12:00, а другое начинаться в 12:00.
# Примечание 2. Дополнительная проверка данных на корректность не требуется. Гарантируется, что реализованные классы используются только с корректными данными.
# Примечание 3. Никаких ограничений касательно реализаций классов нет, они могут быть произвольными.




conference = Conference()

conference.add(Lecture('Простые числа', '08:00', '01:30'))
conference.add(Lecture('Жизнь после ChatGPT', '10:00', '02:00'))
conference.add(Lecture('Муравьиный алгоритм', '13:30', '01:50'))
print(conference.total())
print(conference.longest_lecture())
print(conference.longest_break())